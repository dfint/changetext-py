from typing import Union, Optional, overload, Callable, TextIO, Set, Tuple


def any_in_tag(gram: Union[set, str], parse) -> bool: ...
def inflect_noun(word: str, case: str, orig_form: Union[str, set, None]=None) -> Optional[str]: ...



def init() -> None: ...

def change_text(text: str) -> Optional[str]: ...

class Logger:
    logged: Set[str]
    log_file: TextIO
    def __init__(self, log_file: Optional[TextIO]=None): ...
    def write(self, text: str, result: str) -> None: ...

def get_logger(log_file: Optional[TextIO]=None) -> Logger: ...

def utf16_codec(func: Callable) -> Callable: ...
def log_exceptions_and_result(func: Callable) -> Callable: ...

@overload
def ChangeText(text: bytes) -> Optional[bytes]: ...
@overload
def ChangeText(text: str) -> Optional[str]: ...
